{"ast":null,"code":"import _classCallCheck from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport { Component } from 'react';\nimport * as d3 from 'd3';\nimport * as ReactFauxDOM from 'react-faux-dom';\nimport data from \"../Resources/data.json\";\n\nvar getDataFor = function getDataFor(country) {\n  console.log(country, data);\n  return data[[country]]['Both'].sort(function (a, b) {\n    return a.year - b.year;\n  });\n};\n\nvar Chart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Chart, _Component);\n\n  function Chart(props) {\n    var _this;\n\n    _classCallCheck(this, Chart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chart).call(this, props));\n    _this.state = {\n      activeCountries: [\"Canada\", \"United States\"],\n      totalCountries: Object.keys(data)\n    };\n    _this.makeD3 = _this.makeD3.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Chart, [{\n    key: \"makeD3\",\n    value: function makeD3() {\n      var fauxDiv = ReactFauxDOM.createElement('div'); // set the dimensions and margins of the graph\n\n      var margin = {\n        top: 20,\n        right: 20,\n        bottom: 30,\n        left: 50\n      },\n          width = 960 - margin.left - margin.right,\n          height = 500 - margin.top - margin.bottom; // parse the date / time\n\n      var parseTime = d3.timeParse(\"%Y\"); // set the ranges\n\n      var x = d3.scaleTime().range([0, width]);\n      var y = d3.scaleLinear().range([height, 0]); //let canada = [{val:0.2, year:1995}, {val:1.0, year:2015}]\n\n      var canada = data['Canada'][\"Both\"];\n      var us = data['United States'][\"Both\"];\n      canada.sort(function (a, b) {\n        return a.year - b.year;\n      });\n      var svg = d3.select(fauxDiv).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n      var parseYear = d3.timeParse(\"%Y\");\n      console.log(d3.extent(canada, function (d) {\n        return parseYear(d.year);\n      })); // Scale the range of the data\n\n      x.domain(d3.extent(canada, function (d) {\n        return parseYear(d.year);\n      }));\n      y.domain([0, d3.max(canada, us, function (d) {\n        return d.val;\n      })]); // define the line\n\n      var valueline = d3.line().x(function (d) {\n        return x(new Date(d.year, 1, 1));\n      }).y(function (d) {\n        return y(d.val);\n      });\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.state.activeCountries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var country = _step.value;\n          svg.append(\"path\").datum(getDataFor(country)).attr(\"class\", \"line\").attr(\"d\", valueline).attr(\"stroke-width\", \"1px\").attr(\"stroke\", 'black').attr('color', 'black').attr(\"fill\", 'none');\n        } // Add the X Axis\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x).ticks(5).tickSizeOuter(0)); // Add the Y Axis\n\n      svg.append(\"g\").call(d3.axisLeft(y).ticks(10).tickSizeOuter(0));\n      return fauxDiv;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var FauxSvg = this.makeD3();\n      return FauxSvg.toReact();\n    }\n  }]);\n\n  return Chart;\n}(Component);\n\nexport default ReactFauxDOM.withFauxDOM(Chart); // makeD4(){\n//     let fauxDiv = ReactFauxDOM.createElement('div');  \n//     // Set the margins\n//     var margin = {top: 60, right: 100, bottom: 20, left: 80},\n//     width = 850 - margin.left - margin.right,\n//     height = 370 - margin.top - margin.bottom;\n//     let parseYear = d3.timeParse(\"%Y\")\n//     let formatYear = d3.timeFormat(\"%Y\");\n//     console.log(d3.scaleTime.domain([parseYear(\"1990\"),parseYear(\"2017\")]));\n//     // Set the ranges\n//     var x = d3.scaleTime().domain([parseYear(\"1990\"),parseYear(\"2017\")]).range([0, width]);\n//     var y = d3.scaleLinear().range([height, 0]);\n//     // Define the line\n//     var valueLine = d3.line()\n//     .x(function(d) { return x(d.Month); })\n//     .y(function(d) { return y(+d.Sales); })\n//     // Create the svg canvas in the \"graph\" div\n//     var svg = d3.select(fauxDiv)\n//                     .append(\"svg\")\n//                     .style(\"width\", width + margin.left + margin.right + \"px\")\n//                     .style(\"height\", height + margin.top + margin.bottom + \"px\")\n//                     .attr(\"width\", width + margin.left + margin.right)\n//                     .attr(\"height\", height + margin.top + margin.bottom)\n//                     .append(\"g\")\n//                     .attr(\"transform\",\"translate(\" + margin.left + \",\" + margin.top + \")\")\n//                     .attr(\"class\", \"svg\");\n//     // Scale the range of the data\n//     x.domain(d3.extent(data, function(d) { return d.year; }));\n//     y.domain([0, d3.max(data, function(d) { return d.val; })]);\n//     // Set up the x axis\n//     var xaxis = svg.append(\"g\")\n//         .attr(\"transform\", \"translate(0,\" + height + \")\")\n//         .attr(\"class\", \"x axis\")\n//         .call(d3.axisBottom(x)\n//             .ticks(d3.timeMonth)\n//             .tickSize(0, 0)\n//             .tickSizeInner(0)\n//             .tickPadding(10));\n//     // Add the Y Axis\n//     var yaxis = svg.append(\"g\")\n//         .attr(\"class\", \"y axis\")\n//         .call(d3.axisLeft(y)\n//             .ticks(5)\n//             .tickSizeInner(0)\n//             .tickPadding(6)\n//             .tickSize(0, 0));\n//     // yaxis.select(\".domain\").style(\"display\",\"none\")\n//     // Add a label to the y axis\n//     svg.append(\"text\")\n//         .attr(\"transform\", \"rotate(-90)\")\n//         .attr(\"y\", 0 - 60)\n//         .attr(\"x\", 0 - (height / 2))\n//         .attr(\"dy\", \"1em\")\n//         .style(\"text-anchor\", \"middle\")\n//         .text(\"Deaths per Thousand\")\n//         .attr(\"class\", \"y axis label\");\n//     // Draw the line\n//     svg.append(\"path\")\n//         .data([data])\n//         .attr(\"class\", \"line\")\n//         .attr(\"d\", valueLine);\n//     console.log(data)\n//     return fauxDiv;\n// }","map":{"version":3,"sources":["/Users/fernb0t/Code/react/ihme/src/Components/Chart.js"],"names":["Component","d3","ReactFauxDOM","data","getDataFor","country","console","log","sort","a","b","year","Chart","props","state","activeCountries","totalCountries","Object","keys","makeD3","bind","fauxDiv","createElement","margin","top","right","bottom","left","width","height","parseTime","timeParse","x","scaleTime","range","y","scaleLinear","canada","us","svg","select","append","attr","parseYear","extent","d","domain","max","val","valueline","line","Date","datum","call","axisBottom","ticks","tickSizeOuter","axisLeft","FauxSvg","toReact","withFauxDOM"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport * as d3 from 'd3'\nimport * as ReactFauxDOM from 'react-faux-dom'\nimport data from \"../Resources/data.json\"\n\nconst getDataFor = (country) =>{\n    console.log(country, data)\n    return data[[country]]['Both'].sort(function(a, b){return a.year - b.year})\n\n}\nclass Chart extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            activeCountries : [\"Canada\", \"United States\"],\n            totalCountries : Object.keys(data),\n        }\n\n        this.makeD3 = this.makeD3.bind(this);\n    }\n\n    makeD3(){\n        let fauxDiv = ReactFauxDOM.createElement('div');  \n\n        // set the dimensions and margins of the graph\n        var margin = {top: 20, right: 20, bottom: 30, left: 50},\n        width = 960 - margin.left - margin.right,\n        height = 500 - margin.top - margin.bottom;\n\n        // parse the date / time\n        var parseTime = d3.timeParse(\"%Y\");\n        // set the ranges\n        var x = d3.scaleTime().range([0, width]);\n        var y = d3.scaleLinear().range([height, 0]);\n\n        //let canada = [{val:0.2, year:1995}, {val:1.0, year:2015}]\n        let canada = data['Canada'][\"Both\"];\n        let us = data['United States'][\"Both\"];\n        canada.sort(function(a, b){return a.year - b.year})\n\n        let svg = d3.select(fauxDiv).append(\"svg\")\n                    .attr(\"width\", width + margin.left + margin.right)\n                    .attr(\"height\", height + margin.top + margin.bottom)\n                    .append(\"g\")\n                    .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        let parseYear = d3.timeParse(\"%Y\");\n\n        console.log(d3.extent(canada, function(d) { return parseYear(d.year) }));\n        // Scale the range of the data\n        x.domain(d3.extent(canada, function(d) { return parseYear(d.year) }));\n        y.domain([0, d3.max(canada, us, function(d) { return d.val; })]);\n\n        // define the line\n        let valueline = d3.line()\n            .x(function(d) { return x(new Date(d.year, 1, 1)); })\n            .y(function(d) { return y(d.val); });\n\n        for( let country of this.state.activeCountries){\n            svg.append(\"path\")\n                .datum(getDataFor(country))\n                .attr(\"class\", \"line\")\n                .attr(\"d\",valueline)\n                .attr(\"stroke-width\", \"1px\")\n                .attr(\"stroke\", 'black')\n                .attr('color', 'black')\n                .attr(\"fill\", 'none');\n        }\n\n        // Add the X Axis\n        svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x).ticks(5).tickSizeOuter(0));\n\n        // Add the Y Axis\n        svg.append(\"g\")\n        .call(d3.axisLeft(y).ticks(10).tickSizeOuter(0));\n        \n        return fauxDiv;\n    }\n\n\n\n    render() {\n        let FauxSvg = this.makeD3();\n\n        return (\n            FauxSvg.toReact()\n        );\n    }\n}\n\n\nexport default ReactFauxDOM.withFauxDOM(Chart);\n\n// makeD4(){\n//     let fauxDiv = ReactFauxDOM.createElement('div');  \n\n//     // Set the margins\n//     var margin = {top: 60, right: 100, bottom: 20, left: 80},\n//     width = 850 - margin.left - margin.right,\n//     height = 370 - margin.top - margin.bottom;\n\n//     let parseYear = d3.timeParse(\"%Y\")\n//     let formatYear = d3.timeFormat(\"%Y\");\n//     console.log(d3.scaleTime.domain([parseYear(\"1990\"),parseYear(\"2017\")]));\n//     // Set the ranges\n//     var x = d3.scaleTime().domain([parseYear(\"1990\"),parseYear(\"2017\")]).range([0, width]);\n//     var y = d3.scaleLinear().range([height, 0]);\n\n//     // Define the line\n//     var valueLine = d3.line()\n//     .x(function(d) { return x(d.Month); })\n//     .y(function(d) { return y(+d.Sales); })\n\n//     // Create the svg canvas in the \"graph\" div\n//     var svg = d3.select(fauxDiv)\n//                     .append(\"svg\")\n//                     .style(\"width\", width + margin.left + margin.right + \"px\")\n//                     .style(\"height\", height + margin.top + margin.bottom + \"px\")\n//                     .attr(\"width\", width + margin.left + margin.right)\n//                     .attr(\"height\", height + margin.top + margin.bottom)\n//                     .append(\"g\")\n//                     .attr(\"transform\",\"translate(\" + margin.left + \",\" + margin.top + \")\")\n//                     .attr(\"class\", \"svg\");\n    \n//     // Scale the range of the data\n//     x.domain(d3.extent(data, function(d) { return d.year; }));\n//     y.domain([0, d3.max(data, function(d) { return d.val; })]);\n\n//     // Set up the x axis\n//     var xaxis = svg.append(\"g\")\n//         .attr(\"transform\", \"translate(0,\" + height + \")\")\n//         .attr(\"class\", \"x axis\")\n//         .call(d3.axisBottom(x)\n//             .ticks(d3.timeMonth)\n//             .tickSize(0, 0)\n//             .tickSizeInner(0)\n//             .tickPadding(10));\n\n//     // Add the Y Axis\n//     var yaxis = svg.append(\"g\")\n//         .attr(\"class\", \"y axis\")\n//         .call(d3.axisLeft(y)\n//             .ticks(5)\n//             .tickSizeInner(0)\n//             .tickPadding(6)\n//             .tickSize(0, 0));\n\n//     // yaxis.select(\".domain\").style(\"display\",\"none\")\n\n//     // Add a label to the y axis\n//     svg.append(\"text\")\n//         .attr(\"transform\", \"rotate(-90)\")\n//         .attr(\"y\", 0 - 60)\n//         .attr(\"x\", 0 - (height / 2))\n//         .attr(\"dy\", \"1em\")\n//         .style(\"text-anchor\", \"middle\")\n//         .text(\"Deaths per Thousand\")\n//         .attr(\"class\", \"y axis label\");\n\n//     // Draw the line\n//     svg.append(\"path\")\n//         .data([data])\n//         .attr(\"class\", \"line\")\n//         .attr(\"d\", valueLine);\n//     console.log(data)\n\n//     return fauxDiv;\n// }"]},"metadata":{},"sourceType":"module"}