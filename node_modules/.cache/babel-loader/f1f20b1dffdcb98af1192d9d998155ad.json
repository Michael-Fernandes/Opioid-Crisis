{"ast":null,"code":"import _classCallCheck from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport { Component } from 'react';\nimport * as d3 from 'd3';\nimport * as ReactFauxDOM from 'react-faux-dom';\nimport data from \"../Resources/data.json\";\n\nvar getDataFor = function getDataFor(country) {\n  return data[[country]]['Both'].sort(function (a, b) {\n    return a.year - b.year;\n  });\n};\n\nvar getDomain = function getDomain(countries) {\n  if (countries.length > 1) {\n    var all = [{\n      val: 3.0\n    }];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = countries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var c = _step.value;\n        all = all.concat(c);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return all;\n  }\n\n  return countries;\n};\n\nvar getDataActive = function getDataActive(countries) {\n  var activeData = [];\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = countries[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var c = _step2.value;\n      activeData.push(getDataFor(c.name));\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return activeData;\n};\n\nvar Chart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Chart, _Component);\n\n  function Chart(props) {\n    var _this;\n\n    _classCallCheck(this, Chart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chart).call(this, props));\n    _this.makeD3 = _this.makeD3.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getActive = _this.getActive.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Chart, [{\n    key: \"getActive\",\n    value: function getActive() {\n      var active = this.props.countries.filter(function (el) {\n        return el.active === true;\n      });\n      return active;\n    }\n  }, {\n    key: \"makeD3\",\n    value: function makeD3() {\n      var fauxDiv = ReactFauxDOM.createElement('div'); //  TODO: dynamically add new data\n\n      var activeNames = this.getActive();\n      var activeData = getDataActive(activeNames); // set the dimensions and margins of the graph\n\n      var margin = {\n        top: 20,\n        right: 20,\n        bottom: 30,\n        left: 50\n      },\n          width = 960 - margin.left - margin.right,\n          height = 500 - margin.top - margin.bottom; // parse the date / time\n      //var parseTime = d3.timeParse(\"%Y\");\n      // set the ranges\n\n      var x = d3.scaleTime().range([0, width]);\n      var y = d3.scaleLinear().range([height, 0]); //let canada = [{val:0.2, year:1995}, {val:1.0, year:2015}]\n\n      var canada = data['Canada'][\"Both\"];\n      var us = data['United States'][\"Both\"];\n      canada.sort(function (a, b) {\n        return a.year - b.year;\n      });\n      var svg = d3.select(fauxDiv).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n      var parseYear = d3.timeParse(\"%Y\");\n      console.log(activeData);\n      console.log(d3.max(getDomain(activeData), function (d) {\n        return d.val;\n      })); // Scale the range of the data\n\n      x.domain(d3.extent(canada, function (d) {\n        return parseYear(d.year);\n      }));\n      y.domain([0, d3.max(getDomain(activeData), function (d) {\n        return d.val;\n      })]); // define the line\n\n      var valueline = d3.line().x(function (d) {\n        return x(new Date(d.year, 1, 1));\n      }).y(function (d) {\n        return y(d.val);\n      });\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = activeData[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var countryData = _step3.value;\n          svg.append(\"path\").datum(countryData).attr(\"class\", \"line\").attr(\"d\", valueline).attr(\"stroke-width\", \"1px\").attr(\"stroke\", 'black').attr('color', 'black').attr(\"fill\", 'none');\n        } // Add the X Axis\n\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x).ticks(5).tickSizeOuter(0)); // Add the Y Axis\n\n      svg.append(\"g\").call(d3.axisLeft(y).ticks(10).tickSizeOuter(0));\n      return fauxDiv;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var FauxSvg = this.makeD3();\n      return FauxSvg.toReact();\n    }\n  }]);\n\n  return Chart;\n}(Component);\n\nexport default ReactFauxDOM.withFauxDOM(Chart); // makeD4(){\n//     let fauxDiv = ReactFauxDOM.createElement('div');  \n//     // Set the margins\n//     var margin = {top: 60, right: 100, bottom: 20, left: 80},\n//     width = 850 - margin.left - margin.right,\n//     height = 370 - margin.top - margin.bottom;\n//     let parseYear = d3.timeParse(\"%Y\")\n//     let formatYear = d3.timeFormat(\"%Y\");\n//     console.log(d3.scaleTime.domain([parseYear(\"1990\"),parseYear(\"2017\")]));\n//     // Set the ranges\n//     var x = d3.scaleTime().domain([parseYear(\"1990\"),parseYear(\"2017\")]).range([0, width]);\n//     var y = d3.scaleLinear().range([height, 0]);\n//     // Define the line\n//     var valueLine = d3.line()\n//     .x(function(d) { return x(d.Month); })\n//     .y(function(d) { return y(+d.Sales); })\n//     // Create the svg canvas in the \"graph\" div\n//     var svg = d3.select(fauxDiv)\n//                     .append(\"svg\")\n//                     .style(\"width\", width + margin.left + margin.right + \"px\")\n//                     .style(\"height\", height + margin.top + margin.bottom + \"px\")\n//                     .attr(\"width\", width + margin.left + margin.right)\n//                     .attr(\"height\", height + margin.top + margin.bottom)\n//                     .append(\"g\")\n//                     .attr(\"transform\",\"translate(\" + margin.left + \",\" + margin.top + \")\")\n//                     .attr(\"class\", \"svg\");\n//     // Scale the range of the data\n//     x.domain(d3.extent(data, function(d) { return d.year; }));\n//     y.domain([0, d3.max(data, function(d) { return d.val; })]);\n//     // Set up the x axis\n//     var xaxis = svg.append(\"g\")\n//         .attr(\"transform\", \"translate(0,\" + height + \")\")\n//         .attr(\"class\", \"x axis\")\n//         .call(d3.axisBottom(x)\n//             .ticks(d3.timeMonth)\n//             .tickSize(0, 0)\n//             .tickSizeInner(0)\n//             .tickPadding(10));\n//     // Add the Y Axis\n//     var yaxis = svg.append(\"g\")\n//         .attr(\"class\", \"y axis\")\n//         .call(d3.axisLeft(y)\n//             .ticks(5)\n//             .tickSizeInner(0)\n//             .tickPadding(6)\n//             .tickSize(0, 0));\n//     // yaxis.select(\".domain\").style(\"display\",\"none\")\n//     // Add a label to the y axis\n//     svg.append(\"text\")\n//         .attr(\"transform\", \"rotate(-90)\")\n//         .attr(\"y\", 0 - 60)\n//         .attr(\"x\", 0 - (height / 2))\n//         .attr(\"dy\", \"1em\")\n//         .style(\"text-anchor\", \"middle\")\n//         .text(\"Deaths per Thousand\")\n//         .attr(\"class\", \"y axis label\");\n//     // Draw the line\n//     svg.append(\"path\")\n//         .data([data])\n//         .attr(\"class\", \"line\")\n//         .attr(\"d\", valueLine);\n//     console.log(data)\n//     return fauxDiv;\n// }","map":{"version":3,"sources":["/Users/fernb0t/Code/react/ihme/src/Components/Chart.js"],"names":["Component","d3","ReactFauxDOM","data","getDataFor","country","sort","a","b","year","getDomain","countries","length","all","val","c","concat","getDataActive","activeData","push","name","Chart","props","makeD3","bind","getActive","active","filter","el","fauxDiv","createElement","activeNames","margin","top","right","bottom","left","width","height","x","scaleTime","range","y","scaleLinear","canada","us","svg","select","append","attr","parseYear","timeParse","console","log","max","d","domain","extent","valueline","line","Date","countryData","datum","call","axisBottom","ticks","tickSizeOuter","axisLeft","FauxSvg","toReact","withFauxDOM"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport * as d3 from 'd3'\nimport * as ReactFauxDOM from 'react-faux-dom'\nimport data from \"../Resources/data.json\"\n\nconst getDataFor = (country) =>{\n    return data[[country]]['Both'].sort(function(a, b){return a.year - b.year})\n\n}\n\nconst getDomain = (countries) =>{\n\n    if(countries.length > 1){\n        let all = [{val:3.0}]\n        for(let c of countries){\n            all = all.concat(c);\n        }\n        return all\n    }\n    return countries\n}\n\nconst getDataActive = (countries) =>{\n    let activeData = []\n    for(let c of countries){\n        activeData.push(getDataFor(c.name));\n    }\n    return activeData;\n}\n\nclass Chart extends Component {\n    constructor(props){\n        super(props);\n\n        this.makeD3 = this.makeD3.bind(this);\n        this.getActive = this.getActive.bind(this)\n    }\n\n    getActive(){\n        let active = this.props.countries.filter(el => el.active === true);\n        return active;\n    }\n\n    makeD3(){\n        let fauxDiv = ReactFauxDOM.createElement('div');  \n        //  TODO: dynamically add new data\n        let activeNames = this.getActive();\n        let activeData = getDataActive(activeNames)\n        \n        // set the dimensions and margins of the graph\n        var margin = {top: 20, right: 20, bottom: 30, left: 50},\n        width = 960 - margin.left - margin.right,\n        height = 500 - margin.top - margin.bottom;\n\n        // parse the date / time\n        //var parseTime = d3.timeParse(\"%Y\");\n        // set the ranges\n        var x = d3.scaleTime().range([0, width]);\n        var y = d3.scaleLinear().range([height, 0]);\n\n        //let canada = [{val:0.2, year:1995}, {val:1.0, year:2015}]\n        let canada = data['Canada'][\"Both\"];\n        let us = data['United States'][\"Both\"];\n        canada.sort(function(a, b){return a.year - b.year})\n\n        let svg = d3.select(fauxDiv).append(\"svg\")\n                    .attr(\"width\", width + margin.left + margin.right)\n                    .attr(\"height\", height + margin.top + margin.bottom)\n                    .append(\"g\")\n                    .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        let parseYear = d3.timeParse(\"%Y\");\n        console.log(activeData);\n        console.log(d3.max(getDomain(activeData), function(d) { return d.val; }));\n        // Scale the range of the data\n        x.domain(d3.extent(canada, function(d) { return parseYear(d.year) }));\n        y.domain([0, d3.max(getDomain(activeData), function(d) { return d.val; })]);\n\n        // define the line\n        let valueline = d3.line()\n            .x(function(d) { return x(new Date(d.year, 1, 1)); })\n            .y(function(d) { return y(d.val); });\n\n        for( let countryData of activeData){\n            \n            svg.append(\"path\")\n                .datum(countryData)\n                .attr(\"class\", \"line\")\n                .attr(\"d\",valueline)\n                .attr(\"stroke-width\", \"1px\")\n                .attr(\"stroke\", 'black')\n                .attr('color', 'black')\n                .attr(\"fill\", 'none');\n        }\n\n        // Add the X Axis\n        svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(\n                d3.axisBottom(x)\n                    .ticks(5)\n                    .tickSizeOuter(0)\n                );\n\n        // Add the Y Axis\n        svg.append(\"g\")\n                .call(\n                    d3.axisLeft(y)\n                        .ticks(10)\n                        .tickSizeOuter(0)\n                );\n\n        return fauxDiv;\n    }\n\n\n\n    render() {\n        let FauxSvg = this.makeD3();\n\n        return (\n            FauxSvg.toReact()\n        );\n    }\n}\n\n\nexport default ReactFauxDOM.withFauxDOM(Chart);\n\n// makeD4(){\n//     let fauxDiv = ReactFauxDOM.createElement('div');  \n\n//     // Set the margins\n//     var margin = {top: 60, right: 100, bottom: 20, left: 80},\n//     width = 850 - margin.left - margin.right,\n//     height = 370 - margin.top - margin.bottom;\n\n//     let parseYear = d3.timeParse(\"%Y\")\n//     let formatYear = d3.timeFormat(\"%Y\");\n//     console.log(d3.scaleTime.domain([parseYear(\"1990\"),parseYear(\"2017\")]));\n//     // Set the ranges\n//     var x = d3.scaleTime().domain([parseYear(\"1990\"),parseYear(\"2017\")]).range([0, width]);\n//     var y = d3.scaleLinear().range([height, 0]);\n\n//     // Define the line\n//     var valueLine = d3.line()\n//     .x(function(d) { return x(d.Month); })\n//     .y(function(d) { return y(+d.Sales); })\n\n//     // Create the svg canvas in the \"graph\" div\n//     var svg = d3.select(fauxDiv)\n//                     .append(\"svg\")\n//                     .style(\"width\", width + margin.left + margin.right + \"px\")\n//                     .style(\"height\", height + margin.top + margin.bottom + \"px\")\n//                     .attr(\"width\", width + margin.left + margin.right)\n//                     .attr(\"height\", height + margin.top + margin.bottom)\n//                     .append(\"g\")\n//                     .attr(\"transform\",\"translate(\" + margin.left + \",\" + margin.top + \")\")\n//                     .attr(\"class\", \"svg\");\n    \n//     // Scale the range of the data\n//     x.domain(d3.extent(data, function(d) { return d.year; }));\n//     y.domain([0, d3.max(data, function(d) { return d.val; })]);\n\n//     // Set up the x axis\n//     var xaxis = svg.append(\"g\")\n//         .attr(\"transform\", \"translate(0,\" + height + \")\")\n//         .attr(\"class\", \"x axis\")\n//         .call(d3.axisBottom(x)\n//             .ticks(d3.timeMonth)\n//             .tickSize(0, 0)\n//             .tickSizeInner(0)\n//             .tickPadding(10));\n\n//     // Add the Y Axis\n//     var yaxis = svg.append(\"g\")\n//         .attr(\"class\", \"y axis\")\n//         .call(d3.axisLeft(y)\n//             .ticks(5)\n//             .tickSizeInner(0)\n//             .tickPadding(6)\n//             .tickSize(0, 0));\n\n//     // yaxis.select(\".domain\").style(\"display\",\"none\")\n\n//     // Add a label to the y axis\n//     svg.append(\"text\")\n//         .attr(\"transform\", \"rotate(-90)\")\n//         .attr(\"y\", 0 - 60)\n//         .attr(\"x\", 0 - (height / 2))\n//         .attr(\"dy\", \"1em\")\n//         .style(\"text-anchor\", \"middle\")\n//         .text(\"Deaths per Thousand\")\n//         .attr(\"class\", \"y axis label\");\n\n//     // Draw the line\n//     svg.append(\"path\")\n//         .data([data])\n//         .attr(\"class\", \"line\")\n//         .attr(\"d\", valueLine);\n//     console.log(data)\n\n//     return fauxDiv;\n// }"]},"metadata":{},"sourceType":"module"}