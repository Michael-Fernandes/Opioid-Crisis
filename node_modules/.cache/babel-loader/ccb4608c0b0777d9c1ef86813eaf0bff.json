{"ast":null,"code":"import _classCallCheck from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport * as ReactFauxDOM from 'react-faux-dom';\nimport data from \"../Resources/data.json\";\n\nvar Chart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Chart, _Component);\n\n  function Chart(props) {\n    var _this;\n\n    _classCallCheck(this, Chart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chart).call(this, props));\n    _this.state = {};\n    _this.makeD3 = _this.makeD3.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Chart, [{\n    key: \"makeD3\",\n    value: function makeD3() {\n      var fauxDiv = ReactFauxDOM.createElement('div'); // Set the margins\n\n      var margin = {\n        top: 60,\n        right: 100,\n        bottom: 20,\n        left: 80\n      },\n          width = 850 - margin.left - margin.right,\n          height = 370 - margin.top - margin.bottom; // Parse the month variable\n\n      var parseMonth = d3.timeParse(\"%b\");\n      var formatMonth = d3.timeFormat(\"%b\");\n      console.log(parseMonth(data.Canada.both)); // Set the ranges\n\n      var x = d3.scaleTime().domain([parseMonth(\"Jan\"), parseMonth(\"Dec\")]).range([0, width]);\n      var y = d3.scaleLinear().range([height, 0]); // Define the line\n\n      var valueLine = d3.line().x(function (d) {\n        return x(d.Month);\n      }).y(function (d) {\n        return y(+d.Sales);\n      }); // Create the svg canvas in the \"graph\" div\n\n      var svg = d3.select(fauxDiv).append(\"svg\").style(\"width\", width + margin.left + margin.right + \"px\").style(\"height\", height + margin.top + margin.bottom + \"px\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"svg\"); // Scale the range of the data\n\n      x.domain(d3.extent(data, function (d) {\n        return d.year;\n      }));\n      y.domain([0, d3.max(data, function (d) {\n        return d.val;\n      })]); // Set up the x axis\n\n      var xaxis = svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").attr(\"class\", \"x axis\").call(d3.axisBottom(x).ticks(d3.timeMonth).tickSize(0, 0).tickSizeInner(0).tickPadding(10)); // Add the Y Axis\n\n      var yaxis = svg.append(\"g\").attr(\"class\", \"y axis\").call(d3.axisLeft(y).ticks(5).tickSizeInner(0).tickPadding(6).tickSize(0, 0)); // yaxis.select(\".domain\").style(\"display\",\"none\")\n      // Add a label to the y axis\n\n      svg.append(\"text\").attr(\"transform\", \"rotate(-90)\").attr(\"y\", 0 - 60).attr(\"x\", 0 - height / 2).attr(\"dy\", \"1em\").style(\"text-anchor\", \"middle\").text(\"Deaths per Thousand\").attr(\"class\", \"y axis label\"); // Draw the line\n\n      svg.append(\"path\").data([data]).attr(\"class\", \"line\").attr(\"d\", valueLine);\n      console.log(data);\n      return fauxDiv;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var FauxSvg = this.makeD3();\n      return FauxSvg.toReact();\n    }\n  }]);\n\n  return Chart;\n}(Component);\n\nexport default ReactFauxDOM.withFauxDOM(Chart);","map":{"version":3,"sources":["/Users/fernb0t/Code/react/ihme/src/Components/Chart.js"],"names":["React","Component","d3","ReactFauxDOM","data","Chart","props","state","makeD3","bind","fauxDiv","createElement","margin","top","right","bottom","left","width","height","parseMonth","timeParse","formatMonth","timeFormat","console","log","Canada","both","x","scaleTime","domain","range","y","scaleLinear","valueLine","line","d","Month","Sales","svg","select","append","style","attr","extent","year","max","val","xaxis","call","axisBottom","ticks","timeMonth","tickSize","tickSizeInner","tickPadding","yaxis","axisLeft","text","FauxSvg","toReact","withFauxDOM"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport * as d3 from 'd3'\nimport * as ReactFauxDOM from 'react-faux-dom'\nimport data from \"../Resources/data.json\"\nclass Chart extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n        }\n\n        this.makeD3 = this.makeD3.bind(this);\n    }\n\n    makeD3(){\n        let fauxDiv = ReactFauxDOM.createElement('div');  \n\n        // Set the margins\n        var margin = {top: 60, right: 100, bottom: 20, left: 80},\n        width = 850 - margin.left - margin.right,\n        height = 370 - margin.top - margin.bottom;\n\n        // Parse the month variable\n        var parseMonth = d3.timeParse(\"%b\");\n        var formatMonth = d3.timeFormat(\"%b\");\n        console.log(parseMonth(data.Canada.both))\n        // Set the ranges\n        var x = d3.scaleTime().domain([parseMonth(\"Jan\"),parseMonth(\"Dec\")]).range([0, width]);\n        var y = d3.scaleLinear().range([height, 0]);\n\n        // Define the line\n        var valueLine = d3.line()\n        .x(function(d) { return x(d.Month); })\n        .y(function(d) { return y(+d.Sales); })\n\n        // Create the svg canvas in the \"graph\" div\n        var svg = d3.select(fauxDiv)\n                        .append(\"svg\")\n                        .style(\"width\", width + margin.left + margin.right + \"px\")\n                        .style(\"height\", height + margin.top + margin.bottom + \"px\")\n                        .attr(\"width\", width + margin.left + margin.right)\n                        .attr(\"height\", height + margin.top + margin.bottom)\n                        .append(\"g\")\n                        .attr(\"transform\",\"translate(\" + margin.left + \",\" + margin.top + \")\")\n                        .attr(\"class\", \"svg\");\n        \n        // Scale the range of the data\n        x.domain(d3.extent(data, function(d) { return d.year; }));\n        y.domain([0, d3.max(data, function(d) { return d.val; })]);\n\n        // Set up the x axis\n        var xaxis = svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .attr(\"class\", \"x axis\")\n            .call(d3.axisBottom(x)\n                .ticks(d3.timeMonth)\n                .tickSize(0, 0)\n                .tickSizeInner(0)\n                .tickPadding(10));\n\n        // Add the Y Axis\n        var yaxis = svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .call(d3.axisLeft(y)\n                .ticks(5)\n                .tickSizeInner(0)\n                .tickPadding(6)\n                .tickSize(0, 0));\n\n        // yaxis.select(\".domain\").style(\"display\",\"none\")\n\n        // Add a label to the y axis\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - 60)\n            .attr(\"x\", 0 - (height / 2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Deaths per Thousand\")\n            .attr(\"class\", \"y axis label\");\n\n        // Draw the line\n        svg.append(\"path\")\n            .data([data])\n            .attr(\"class\", \"line\")\n            .attr(\"d\", valueLine);\n        console.log(data)\n\n        return fauxDiv;\n    }\n\n    render() {\n        let FauxSvg = this.makeD3();\n\n        return (\n            FauxSvg.toReact()\n        );\n    }\n}\n\n\nexport default ReactFauxDOM.withFauxDOM(Chart);"]},"metadata":{},"sourceType":"module"}