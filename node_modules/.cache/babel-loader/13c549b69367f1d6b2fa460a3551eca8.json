{"ast":null,"code":"import _classCallCheck from \"/Users/fernb0t/Code/react/Opioid Crisis/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/fernb0t/Code/react/Opioid Crisis/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/fernb0t/Code/react/Opioid Crisis/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/fernb0t/Code/react/Opioid Crisis/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/fernb0t/Code/react/Opioid Crisis/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/fernb0t/Code/react/Opioid Crisis/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/fernb0t/Code/react/Opioid Crisis/src/Components/Chart/CountryBlock.js\";\nimport React, { Component } from 'react';\nimport Countries from \"../../Resources/Continents\";\nvar blocks = [\"--\", \"EU (European Union)\", \"AU (African Union)\", \"USAN (Union of South American Nations)\", \"AL (Arab League)\", \"ASEAN (Association of Southeast Asian Nations)\", \"PA (Pacific Alliance)\", \"USAN (Union of South American Nations)\"];\nvar continents = {\n  \"--\": \"--\",\n  \"Africa\": \"AF\",\n  \"Asia\": \"AS\",\n  \"Europe\": \"EU\",\n  \"North America\": \"NA\",\n  \"Oceania\": \"OC\",\n  \"South America\": \"SA\"\n};\n\nvar CountryBlock =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CountryBlock, _Component);\n\n  function CountryBlock(props) {\n    var _this;\n\n    _classCallCheck(this, CountryBlock);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CountryBlock).call(this, props));\n    _this.state = {\n      selected: \"--\",\n      continent: \"--\"\n    };\n    _this.onSelect = _this.onSelect.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onSelectContinent = _this.onSelectContinent.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(CountryBlock, [{\n    key: \"onSelect\",\n    value: function onSelect(event) {\n      var selectBlock = this.props.selectBlock;\n      var code = event.target.value.split(\" \")[0];\n\n      if (code !== \"--\") {\n        fetch(\"https://restcountries.eu/rest/v2/regionalbloc/\" + code).then(function (response) {\n          return response.json();\n        }).then(function (json) {\n          selectBlock(json.map(function (el) {\n            return el.name;\n          }));\n        }).catch(function (err) {\n          return console.log(err);\n        });\n      } else {\n        selectBlock([]);\n      }\n\n      this.setState({\n        selected: event.target.value,\n        continent: \"--\"\n      });\n    }\n  }, {\n    key: \"onSelectContinent\",\n    value: function onSelectContinent(event) {\n      var selectedCountries = [];\n      var countryAbbreviations = Object.keys(Countries);\n      var selectedAbbreviations = countryAbbreviations.filter(function (elem) {\n        console.log(Countries[elem].continent == continents[event.target.value]);\n        return null;\n      });\n\n      for (var i = 0; i < countryAbbreviations.length; i++) {\n        if (Countries[countryAbbreviation[i]] in selectedAbbreviation) selectedCountries.push(Countries[countryAbbreviation[i]].name);\n      }\n\n      selectBlock(selectedCountries);\n      this.setState({\n        selected: \"--\",\n        continent: event.target.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"selectBlockWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        style: {\n          display: 'block',\n          \"fontWeight\": \"600\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"Country Blocks\"), React.createElement(\"select\", {\n        value: this.state.selected,\n        onChange: this.onSelect,\n        className: \"selectBlock\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, blocks.map(function (elem, index) {\n        return React.createElement(\"option\", {\n          value: elem,\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, elem);\n      }))), React.createElement(\"div\", {\n        className: \"selectBlockWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        style: {\n          display: 'block',\n          \"fontWeight\": \"600\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Countries\"), React.createElement(\"select\", {\n        value: this.state.continent,\n        onChange: this.onSelectContinent,\n        className: \"selectBlock\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, Object.keys(continents).map(function (elem, index) {\n        return React.createElement(\"option\", {\n          value: elem,\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, elem);\n      }))));\n    }\n  }]);\n\n  return CountryBlock;\n}(Component);\n\nexport { CountryBlock as default };","map":{"version":3,"sources":["/Users/fernb0t/Code/react/Opioid Crisis/src/Components/Chart/CountryBlock.js"],"names":["React","Component","Countries","blocks","continents","CountryBlock","props","state","selected","continent","onSelect","bind","onSelectContinent","event","selectBlock","code","target","value","split","fetch","then","response","json","map","el","name","catch","err","console","log","setState","selectedCountries","countryAbbreviations","Object","keys","selectedAbbreviations","filter","elem","i","length","countryAbbreviation","selectedAbbreviation","push","display","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Countries from \"../../Resources/Continents\"\nconst blocks = [\"--\", \"EU (European Union)\", \"AU (African Union)\", \"USAN (Union of South American Nations)\", \"AL (Arab League)\", \"ASEAN (Association of Southeast Asian Nations)\", \"PA (Pacific Alliance)\", \"USAN (Union of South American Nations)\"]\nconst continents = {\n    \"--\":\"--\",\n    \"Africa\": \"AF\",\n    \"Asia\": \"AS\",\n    \"Europe\": \"EU\",\n    \"North America\": \"NA\",\n    \"Oceania\": \"OC\",\n    \"South America\": \"SA\"\n}\n\nexport default class CountryBlock extends Component {\n  constructor(props){\n      super(props);\n      this.state = { selected:\"--\", continent:\"--\" };\n      \n      this.onSelect = this.onSelect.bind(this);\n      this.onSelectContinent = this.onSelectContinent.bind(this);\n  }\n\n  onSelect(event){\n    let { selectBlock } = this.props;\n    const code = event.target.value.split(\" \")[0];\n    if(code !== \"--\"){\n        fetch(\"https://restcountries.eu/rest/v2/regionalbloc/\" + code)\n            .then(function(response) {\n                return response.json();\n            }).then(function(json) {\n                selectBlock(json.map(el => el.name));\n            }).catch((err) => console.log(err) );\n    } else {\n        selectBlock([]);\n    }\n\n    this.setState({selected: event.target.value, continent:\"--\"});\n  }\n\n  onSelectContinent(event){\n    let selectedCountries = []\n    let countryAbbreviations = Object.keys(Countries);\n    let selectedAbbreviations = countryAbbreviations.filter( elem =>{ console.log(Countries[elem].continent == continents[event.target.value]); return null } );\n    for(let i = 0; i < countryAbbreviations.length; i++){\n        if(Countries[countryAbbreviation[i]] in selectedAbbreviation) selectedCountries.push(Countries[countryAbbreviation[i]].name)\n    }\n    selectBlock(selectedCountries);\n    this.setState({selected: \"--\", continent:event.target.value});\n  }\n\n  render() {\n    return (\n        <div>\n            <div className=\"selectBlockWrapper\">\n                <label style={{display:'block', \"fontWeight\":\"600\"}}>\n                    Country Blocks\n                </label>\n                <select value={this.state.selected} onChange={this.onSelect} className=\"selectBlock\">\n                    {blocks.map((elem, index) => <option value={elem} key={index}>{elem}</option> )}\n                </select>\n            </div>\n            <div className=\"selectBlockWrapper\">\n                <label style={{display:'block', \"fontWeight\":\"600\"}}>\n                    Countries\n                </label>\n                <select value={this.state.continent} onChange={this.onSelectContinent} className=\"selectBlock\">\n                    {Object.keys(continents).map((elem, index) => <option value={elem} key={index}>{elem}</option> )}\n                </select>\n            </div>\n        </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}