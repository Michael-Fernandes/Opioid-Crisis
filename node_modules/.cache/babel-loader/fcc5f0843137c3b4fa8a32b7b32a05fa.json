{"ast":null,"code":"import _classCallCheck from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/fernb0t/Code/react/ihme/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport * as ReactFauxDOM from 'react-faux-dom';\nimport data from \"../Resources/data.json\";\n\nvar Chart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Chart, _Component);\n\n  function Chart(props) {\n    var _this;\n\n    _classCallCheck(this, Chart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chart).call(this, props));\n    _this.state = {};\n    _this.makeD3 = _this.makeD3.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Chart, [{\n    key: \"makeD3\",\n    value: function makeD3() {\n      var fauxDiv = ReactFauxDOM.createElement('div'); // set the dimensions and margins of the graph\n\n      var margin = {\n        top: 20,\n        right: 20,\n        bottom: 30,\n        left: 50\n      },\n          width = 960 - margin.left - margin.right,\n          height = 500 - margin.top - margin.bottom; // parse the date / time\n\n      var parseTime = d3.timeParse(\"%Y\"); // set the ranges\n\n      var x = d3.scaleTime().range([0, width]);\n      var y = d3.scaleLinear().range([height, 0]);\n      var canada = data['Canada']; // // define the line\n      // var valueline = d3.line()\n      //                   .data(canada)\n      //                     .enter()\n      //                     .x(function(d) { return x(d.date); })\n      //                     .y(function(d) { return y(d.close); });\n      // append the svg obgect to the body of the page\n      // appends a 'group' element to 'svg'\n      // moves the 'group' element to the top left margin\n\n      var svg = d3.select(fauxDiv).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); // Scale the range of the data\n\n      x.domain(d3.extent(canada, function (d) {\n        return d.year;\n      }));\n      y.domain([0, d3.max(canada, function (d) {\n        return d.val;\n      })]); // // Add the valueline path.\n      // svg.append(\"path\")\n      // .data([data])\n      // .attr(\"class\", \"line\")\n      // .attr(\"d\", valueline);\n      // Add the X Axis\n\n      svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x).ticks(5)); // Add the Y Axis\n\n      svg.append(\"g\").call(d3.axisLeft(y).ticks(5));\n      console.log(d3.extent(canada, function (d) {\n        return d.year;\n      }));\n      return fauxDiv;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var FauxSvg = this.makeD3();\n      return FauxSvg.toReact();\n    }\n  }]);\n\n  return Chart;\n}(Component);\n\nexport default ReactFauxDOM.withFauxDOM(Chart); // makeD4(){\n//     let fauxDiv = ReactFauxDOM.createElement('div');  \n//     // Set the margins\n//     var margin = {top: 60, right: 100, bottom: 20, left: 80},\n//     width = 850 - margin.left - margin.right,\n//     height = 370 - margin.top - margin.bottom;\n//     let parseYear = d3.timeParse(\"%Y\")\n//     let formatYear = d3.timeFormat(\"%Y\");\n//     console.log(d3.scaleTime.domain([parseYear(\"1990\"),parseYear(\"2017\")]));\n//     // Set the ranges\n//     var x = d3.scaleTime().domain([parseYear(\"1990\"),parseYear(\"2017\")]).range([0, width]);\n//     var y = d3.scaleLinear().range([height, 0]);\n//     // Define the line\n//     var valueLine = d3.line()\n//     .x(function(d) { return x(d.Month); })\n//     .y(function(d) { return y(+d.Sales); })\n//     // Create the svg canvas in the \"graph\" div\n//     var svg = d3.select(fauxDiv)\n//                     .append(\"svg\")\n//                     .style(\"width\", width + margin.left + margin.right + \"px\")\n//                     .style(\"height\", height + margin.top + margin.bottom + \"px\")\n//                     .attr(\"width\", width + margin.left + margin.right)\n//                     .attr(\"height\", height + margin.top + margin.bottom)\n//                     .append(\"g\")\n//                     .attr(\"transform\",\"translate(\" + margin.left + \",\" + margin.top + \")\")\n//                     .attr(\"class\", \"svg\");\n//     // Scale the range of the data\n//     x.domain(d3.extent(data, function(d) { return d.year; }));\n//     y.domain([0, d3.max(data, function(d) { return d.val; })]);\n//     // Set up the x axis\n//     var xaxis = svg.append(\"g\")\n//         .attr(\"transform\", \"translate(0,\" + height + \")\")\n//         .attr(\"class\", \"x axis\")\n//         .call(d3.axisBottom(x)\n//             .ticks(d3.timeMonth)\n//             .tickSize(0, 0)\n//             .tickSizeInner(0)\n//             .tickPadding(10));\n//     // Add the Y Axis\n//     var yaxis = svg.append(\"g\")\n//         .attr(\"class\", \"y axis\")\n//         .call(d3.axisLeft(y)\n//             .ticks(5)\n//             .tickSizeInner(0)\n//             .tickPadding(6)\n//             .tickSize(0, 0));\n//     // yaxis.select(\".domain\").style(\"display\",\"none\")\n//     // Add a label to the y axis\n//     svg.append(\"text\")\n//         .attr(\"transform\", \"rotate(-90)\")\n//         .attr(\"y\", 0 - 60)\n//         .attr(\"x\", 0 - (height / 2))\n//         .attr(\"dy\", \"1em\")\n//         .style(\"text-anchor\", \"middle\")\n//         .text(\"Deaths per Thousand\")\n//         .attr(\"class\", \"y axis label\");\n//     // Draw the line\n//     svg.append(\"path\")\n//         .data([data])\n//         .attr(\"class\", \"line\")\n//         .attr(\"d\", valueLine);\n//     console.log(data)\n//     return fauxDiv;\n// }","map":{"version":3,"sources":["/Users/fernb0t/Code/react/ihme/src/Components/Chart.js"],"names":["React","Component","d3","ReactFauxDOM","data","Chart","props","state","makeD3","bind","fauxDiv","createElement","margin","top","right","bottom","left","width","height","parseTime","timeParse","x","scaleTime","range","y","scaleLinear","canada","svg","select","append","attr","domain","extent","d","year","max","val","call","axisBottom","ticks","axisLeft","console","log","FauxSvg","toReact","withFauxDOM"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport * as d3 from 'd3'\nimport * as ReactFauxDOM from 'react-faux-dom'\nimport data from \"../Resources/data.json\"\n\nclass Chart extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n        }\n\n        this.makeD3 = this.makeD3.bind(this);\n    }\n\n    makeD3(){\n        let fauxDiv = ReactFauxDOM.createElement('div');  \n\n        // set the dimensions and margins of the graph\n        var margin = {top: 20, right: 20, bottom: 30, left: 50},\n        width = 960 - margin.left - margin.right,\n        height = 500 - margin.top - margin.bottom;\n\n        // parse the date / time\n        var parseTime = d3.timeParse(\"%Y\");\n        // set the ranges\n        var x = d3.scaleTime().range([0, width]);\n        var y = d3.scaleLinear().range([height, 0]);\n\n        let canada = data['Canada'];\n        \n        // // define the line\n        // var valueline = d3.line()\n        //                   .data(canada)\n        //                     .enter()\n        //                     .x(function(d) { return x(d.date); })\n        //                     .y(function(d) { return y(d.close); });\n\n        // append the svg obgect to the body of the page\n        // appends a 'group' element to 'svg'\n        // moves the 'group' element to the top left margin\n        var svg = d3.select(fauxDiv).append(\"svg\")\n                    .attr(\"width\", width + margin.left + margin.right)\n                    .attr(\"height\", height + margin.top + margin.bottom)\n                    .append(\"g\")\n                    .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        // Scale the range of the data\n        x.domain(d3.extent(canada, function(d) { return d.year; }));\n        y.domain([0, d3.max(canada, function(d) { return d.val; })]);\n\n        // // Add the valueline path.\n        // svg.append(\"path\")\n        // .data([data])\n        // .attr(\"class\", \"line\")\n        // .attr(\"d\", valueline);\n\n        // Add the X Axis\n        svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x).ticks(5));\n\n        // Add the Y Axis\n        svg.append(\"g\")\n        .call(d3.axisLeft(y).ticks(5));\n        console.log(d3.extent(canada, function(d) { return d.year; }))\n        return fauxDiv;\n    }\n\n\n\n    render() {\n        let FauxSvg = this.makeD3();\n\n        return (\n            FauxSvg.toReact()\n        );\n    }\n}\n\n\nexport default ReactFauxDOM.withFauxDOM(Chart);\n\n// makeD4(){\n//     let fauxDiv = ReactFauxDOM.createElement('div');  \n\n//     // Set the margins\n//     var margin = {top: 60, right: 100, bottom: 20, left: 80},\n//     width = 850 - margin.left - margin.right,\n//     height = 370 - margin.top - margin.bottom;\n\n//     let parseYear = d3.timeParse(\"%Y\")\n//     let formatYear = d3.timeFormat(\"%Y\");\n//     console.log(d3.scaleTime.domain([parseYear(\"1990\"),parseYear(\"2017\")]));\n//     // Set the ranges\n//     var x = d3.scaleTime().domain([parseYear(\"1990\"),parseYear(\"2017\")]).range([0, width]);\n//     var y = d3.scaleLinear().range([height, 0]);\n\n//     // Define the line\n//     var valueLine = d3.line()\n//     .x(function(d) { return x(d.Month); })\n//     .y(function(d) { return y(+d.Sales); })\n\n//     // Create the svg canvas in the \"graph\" div\n//     var svg = d3.select(fauxDiv)\n//                     .append(\"svg\")\n//                     .style(\"width\", width + margin.left + margin.right + \"px\")\n//                     .style(\"height\", height + margin.top + margin.bottom + \"px\")\n//                     .attr(\"width\", width + margin.left + margin.right)\n//                     .attr(\"height\", height + margin.top + margin.bottom)\n//                     .append(\"g\")\n//                     .attr(\"transform\",\"translate(\" + margin.left + \",\" + margin.top + \")\")\n//                     .attr(\"class\", \"svg\");\n    \n//     // Scale the range of the data\n//     x.domain(d3.extent(data, function(d) { return d.year; }));\n//     y.domain([0, d3.max(data, function(d) { return d.val; })]);\n\n//     // Set up the x axis\n//     var xaxis = svg.append(\"g\")\n//         .attr(\"transform\", \"translate(0,\" + height + \")\")\n//         .attr(\"class\", \"x axis\")\n//         .call(d3.axisBottom(x)\n//             .ticks(d3.timeMonth)\n//             .tickSize(0, 0)\n//             .tickSizeInner(0)\n//             .tickPadding(10));\n\n//     // Add the Y Axis\n//     var yaxis = svg.append(\"g\")\n//         .attr(\"class\", \"y axis\")\n//         .call(d3.axisLeft(y)\n//             .ticks(5)\n//             .tickSizeInner(0)\n//             .tickPadding(6)\n//             .tickSize(0, 0));\n\n//     // yaxis.select(\".domain\").style(\"display\",\"none\")\n\n//     // Add a label to the y axis\n//     svg.append(\"text\")\n//         .attr(\"transform\", \"rotate(-90)\")\n//         .attr(\"y\", 0 - 60)\n//         .attr(\"x\", 0 - (height / 2))\n//         .attr(\"dy\", \"1em\")\n//         .style(\"text-anchor\", \"middle\")\n//         .text(\"Deaths per Thousand\")\n//         .attr(\"class\", \"y axis label\");\n\n//     // Draw the line\n//     svg.append(\"path\")\n//         .data([data])\n//         .attr(\"class\", \"line\")\n//         .attr(\"d\", valueLine);\n//     console.log(data)\n\n//     return fauxDiv;\n// }"]},"metadata":{},"sourceType":"module"}